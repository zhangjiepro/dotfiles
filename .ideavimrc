" basic settings
" https://raw.githubusercontent.com/wiki/JetBrains/ideavim/set-commands.md
source ~/.vimrc

" handler

" plugins
set NERDTree
set surround
set argtextobj
set textobj-indent
set textobj-entire
set multiple-cursors
set highlightedyank
let g:highlightedyank_highlight_duration = "800"
set which-key

" goto
nmap gt <action>(GotoTest)
nmap gs <action>(GotoSuperMethod)
nmap gi <action>(GotoImplementation)
nmap gI <action>(QuickImplementations)
nmap gd <action>(GotoDeclaration)
nmap gD <action>(GotoTypeDeclaration)

" []
" goto n/p
nmap [[ <action>(MethodUp)
nmap ]] <action>(MethodDown)
nmap [e <action>(GotoPreviousError)
nmap ]e <action>(GotoNextError)
nmap [o <action>(PreviousOccurence)
nmap ]o <action>(NextOccurence)
nmap [c <action>(JumpToLastChange)
nmap ]c <action>(JumpToNextChange)
nmap ]g <Action>(VcsShowNextChangeMarker)
nmap [g <Action>(VcsShowPrevChangeMarker)

" tab
let g:WhichKeyDesc_X = "<leader>x Close"
let g:WhichKeyDesc_XX = "<leader>xx Close"
let g:WhichKeyDesc_XA = "<leader>xa CloseAll"
let g:WhichKeyDesc_XO = "<leader>xo CloseAllButActive"
let g:WhichKeyDesc_XP = "<leader>xp CloseUnpinned"
" nmap 1<Tab> <action>(GoToTab1)
" nmap 2<Tab> <action>(GoToTab2)
" nmap 3<Tab> <action>(GoToTab3)
" nmap 0<Tab> <action>(GoToLastTab)
" nmap <C-Tab> <action>(Switcher)
nmap <leader>xx <action>(CloseContent)
nmap <leader>xa <action>(CloseAllEditors)
nmap <leader>xo <action>(CloseAllEditorsButActive)
nmap <leader>xp <action>(CloseAllUnpinnedEditors)

" collapse
nmap zC <action>(CollapseAllRegions)
nmap zO <action>(ExpandAllRegions)
nmap zm <action>(MaximizeEditorInSplit) \| <action>(HideAllWindows)
nmap zp <action>(TogglePresentationMode)
nmap zf <action>(ToggleFullScreen)

" bookmark
nmap mm <action>(ToggleBookmark)
nmap ms <action>(ShowBookmarks)

" file action
let g:WhichKeyDesc_GotoFile = "<leader>f GotoFile"
nmap <leader>f <action>(GotoFile)
" global search
let g:WhichKeyDesc_Search = "<leader>/ Search"
map <leader>/ <action>(FindInPath)
vmap <leader>/ <action>(FindSelectionInPath)<Esc>
" Explore
let g:WhichKeyDesc_Explore = "<leader>e Explore"
nmap <leader>e <action>(SelectInProjectView)

" window by idea keymap
" map <A-1> <action>(ActivateTerminalToolWindow)
" map <S-Esc> <action>(HideActiveWindow)

" editor
map <CR> <action>(EditorSelectWord)
map <S-CR> <action>(EditorUnSelectWord)
" imap <C-S-CR> <action>(EditorCompleteStatement) by idea
" imap <C-BS> <action>(EditorDeleteToWordStart) by option + BS
imap <C-u> <action>($Undo)
map / <action>(Replace)
" map <A-p> <action>(ParameterInfo) by command-p
" map <C-CR> <action>(Generate) by idea
" map <A-o> <action>(FileStructurePopup) by command + o idea
" map <A-p> <action>(ParameterInfo) by command-p idea
" map <A-e> <action>(ShowErrorDescription) by command + e idea
map <C-i> <action>(Forward)
map <C-o> <action>(Back)

" map <C-j> <action>(MoveStatementDown) by command + j
" map <C-k> <action>(MoveStatementUp) by command + k

" Refactor
let g:WhichKeyDesc_Search = "<leader>r Refactor"
map <leader>r <action>(Refactorings.QuickListPopupAction)
" format
map = <action>(ReformatCode) \| <action>(OptimizeImports)

" Git
let g:WhichKeyDesc_G = "<leader>g Git"
let g:WhichKeyDesc_GR = "<leader>gr RollbackChangedLines"
let g:WhichKeyDesc_GC = "<leader>gc CheckinProject"
let g:WhichKeyDesc_GH = "<leader>gh ShowFileHistory"
let g:WhichKeyDesc_GP = "<leader>gp UpdateFiles"
nmap <leader>gr <action>(Vcs.RollbackChangedLines)
nmap <leader>gc <action>(CheckinProject)
nmap <leader>gh <action>(Vcs.ShowTabbedFileHistory)
nmap <leader>gp <action>(UpdateFiles)

" command
let g:WhichKeyDesc_CR = "\\r Run"
let g:WhichKeyDesc_CD = "\\d Debug"
let g:WhichKeyDesc_CB = "\\b ReBuild"
nmap \r <action>(Rerun) \| <action>(RunClass)
nmap \R <action>(ChooseRunConfiguration)
nmap \d <action>(DebugClass)
nmap \D <action>(ChooseDebugConfiguration)
nmap \b <action>(Debugger.ReloadFile)
nmap \t <action>(RerunFailedTests) \| <action>(RunClass)

" y
let g:WhichKeyDesc_YP = "yp CopyAbsolutePath"
let g:WhichKeyDesc_YN = "yn CopyFileName"
nmap yp <action>(CopyAbsolutePath)
nmap yn <action>(CopyFileName)
