" basic settings
" https://raw.githubusercontent.com/wiki/JetBrains/ideavim/set-commands.md
source ~/.vimrc

" handler

" plugins
set NERDTree
set surround
set argtextobj
set textobj-indent
set textobj-entire
set multiple-cursors
set highlightedyank
let g:highlightedyank_highlight_duration = "800"
set which-key

nnoremap <leader><Esc> <Nop>

" goto
let g:WhichKeyDesc_Goto_Test = "gt GotoTest"
let g:WhichKeyDesc_Goto_SuperMethod = "gs GotoSuperMethod"
let g:WhichKeyDesc_Goto_Implementation = "gi GotoImplementation"
let g:WhichKeyDesc_Goto_QuickImplementations = "gI QuickImplementations"
let g:WhichKeyDesc_Goto_Declaration = "gd GotoDeclaration"
let g:WhichKeyDesc_Goto_TypeDeclaration = "gD GotoTypeDeclaration"
nnoremap gt :action GotoTest<CR>
nnoremap gs :action GotoSuperMethod<CR>
nnoremap gi :action GotoImplementation<CR>
nnoremap gI :action QuickImplementations<CR>
nnoremap gd :action GotoDeclaration<CR>
nnoremap gD :action GotoTypeDeclaration<CR>

" []
" goto n/p
let g:WhichKeyDesc_Left_Method = "[[ Method"
let g:WhichKeyDesc_Left_Error = "[e Error"
let g:WhichKeyDesc_Left_Change = "[c Change"
let g:WhichKeyDesc_Left_Vcs = "[g Vcs"
let g:WhichKeyDesc_Right_Method = "]] Method"
let g:WhichKeyDesc_Right_Error = "]e Error"
let g:WhichKeyDesc_Right_Change = "]c Change"
let g:WhichKeyDesc_Right_Vcs = "]g Vcs"
nnoremap [[ :action MethodUp<CR>
nnoremap ]] :action MethodDown<CR>
nnoremap [e :action GotoPreviousError<CR>
nnoremap ]e :action GotoNextError<CR>
nnoremap [c :action JumpToLastChange<CR>
nnoremap ]c :action JumpToNextChange<CR>
nnoremap ]g :action VcsShowNextChangeMarker<CR>
nnoremap [g :action VcsShowPrevChangeMarker<CR>

" tab
let g:WhichKeyDesc_Leader_X = "<leader>x Close"
let g:WhichKeyDesc_Leader_XX = "<leader>xx Close"
let g:WhichKeyDesc_Leader_XA = "<leader>xa CloseAll"
let g:WhichKeyDesc_Leader_XO = "<leader>xo CloseAllButActive"
let g:WhichKeyDesc_Leader_XP = "<leader>xp CloseUnpinned"
let g:WhichKeyDesc_Leader_XN = "<leader>xn CloseNotifications"
" nmap <C-Tab> :action Switcher<CR>
nnoremap <leader>xx :action CloseContent<CR>
nnoremap <leader>xa :action CloseAllEditors<CR>
nnoremap <leader>xo :action CloseAllEditorsButActive<CR>
nnoremap <leader>xp :action CloseAllUnpinnedEditors<CR>
nnoremap <leader>xn :action CloseAllNotifications<CR>
nnoremap <leader>x<Esc> <Nop>

" collapse
let g:WhichKeyDesc_Z_CollapseAll = "zC CollapseAll"
let g:WhichKeyDesc_Z_ExpandAll = "zO ExpandAll"
let g:WhichKeyDesc_Z_MaxWindow = "zm MaxWindow"
let g:WhichKeyDesc_Z_TogglePresentationMode = "zp TogglePresentationMode"
let g:WhichKeyDesc_Z_ToggleFullScreen = "zf ToggleFullScreen"
nnoremap zC :action CollapseAllRegions<CR>
nnoremap zO :action ExpandAllRegions<CR>
nnoremap zm :action MaximizeEditorInSplit<CR> \| :action HideAllWindows<CR>
nnoremap zp :action TogglePresentationMode<CR>
nnoremap zf :action ToggleFullScreen<CR>

 bookmark
let g:WhichKeyDesc_M_ToggleBookmark = "mm ToggleBookmark"
let g:WhichKeyDesc_M_ShowBookmarks = "ms ShowBookmarks"
nnoremap mm :action ToggleBookmark<CR>
nnoremap ms :action ShowBookmarks<CR>

" file action
let g:WhichKeyDesc_Leader_GotoFile = "<leader><Space> GotoFile"
nnoremap <leader><Space> :action GotoFile<CR>
" global search
let g:WhichKeyDesc_Leader_Search = "<leader>/ Search"
noremap <leader>/ :action FindInPath<CR>
vnoremap <leader>/ :action FindSelectionInPath<CR>
" Explore
let g:WhichKeyDesc_Leader_Explore = "<leader>e Explore"
nnoremap <leader>e :action SelectInProjectView<CR>
" Refactor
let g:WhichKeyDesc_Leader_Refactor = "<leader>r Refactor"
nnoremap <leader>r :action Refactorings.QuickListPopupAction<CR>

" window by idea keymap
" map <A-1> :action ActivateTerminalToolWindow<CR>
" map <S-Esc> :action HideActiveWindow<CR>

" editor
noremap <CR> :action EditorSelectWord<CR>
noremap <S-CR> :action EditorUnSelectWord<CR>
" imap <C-S-CR> :action EditorCompleteStatement<CR> by idea
imap <C-u> <action>($Undo)
noremap / :action Replace<CR>
nnoremap <C-i> :action Forward<CR>
nnoremap <C-o> :action Back<CR>
nnoremap R :action RenameElement<CR>

" map <A-p> :action ParameterInfo<CR> by command-p
" map <C-CR> :action Generate<CR> by idea
" map <A-o> :action FileStructurePopup<CR> by command + o idea
" map <A-p> :action ParameterInfo<CR> by command-p idea
" map <A-e> :action ShowErrorDescription<CR> by command + e idea
" map <C-j> :action MoveStatementDown<CR> by command + j
" map <C-k> :action MoveStatementUp<CR> by command + k

" format
nnoremap = :action ReformatCode<CR> \| :action OptimizeImports<CR>
vnoremap = :action ReformatCode<CR>

" Git
let g:WhichKeyDesc_Leader_G = "<leader>g Git"
let g:WhichKeyDesc_Leader_GG = "<leader>gg Actions"
let g:WhichKeyDesc_Leader_GR = "<leader>gr RollbackChangedLines"
let g:WhichKeyDesc_Leader_GC = "<leader>gc CheckinProject"
let g:WhichKeyDesc_Leader_GH = "<leader>gh ShowFileHistory"
let g:WhichKeyDesc_Leader_GP = "<leader>gp UpdateFiles"
nnoremap <leader>gg :action Vcs.QuickListPopupAction<CR>
nnoremap <leader>gr :action Vcs.RollbackChangedLines<CR>
nnoremap <leader>gc :action CheckinProject<CR>
nnoremap <leader>gh :action Vcs.ShowTabbedFileHistory<CR>
nnoremap <leader>gp :action UpdateFiles<CR>
nnoremap <leader>g<Esc> <Nop>

" command
let g:WhichKeyDesc_CR = ",r Run"
let g:WhichKeyDesc_CRC = ",R RunChoose"
let g:WhichKeyDesc_CD = ",d Debug"
let g:WhichKeyDesc_CDC = ",D DebugChoose"
let g:WhichKeyDesc_CB = ",b ToggleLineBreakpoint"
let g:WhichKeyDesc_CC = ",c Compile"
let g:WhichKeyDesc_CS = ",c Stop"
" let g:WhichKeyDesc_CT = ",t RunTest"
nnoremap ,r :action RunClass<CR>
nnoremap ,R :action ChooseRunConfiguration<CR>
nnoremap ,d :action DebugClass<CR>
nnoremap ,D :action ChooseDebugConfiguration<CR>
nnoremap ,b :action ToggleLineBreakpoint<CR>
nnoremap ,c :action CompileDirty<CR>
" nmap ,t :action RerunFailedTests<CR>

" y
let g:WhichKeyDesc_YP = "yp CopyAbsolutePath"
let g:WhichKeyDesc_YN = "yn CopyFileName"
nnoremap yp :action CopyAbsolutePath<CR>
nnoremap yn :action CopyFileName<CR>
